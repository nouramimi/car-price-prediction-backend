# -*- coding: utf-8 -*-
"""TAYARAEND.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xo7dYBQJtL9wBjIlM6CWPfaaY2NzJ1tt
"""

import pandas as pd
import numpy as np
import chardet
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import pickle

with open('Cleaned_Car_data.csv', 'rb') as f:
    encoding = chardet.detect(f.read())['encoding']

df = pd.read_csv('Cleaned_Car_data.csv', encoding=encoding,delimiter=',')

df.head()

df['Mise en circulation'] = (df['Mise en circulation'] % 1 * 10000).astype(int)

X=df[['Marque', 'Modèle', 'Puissance fiscale', 'Transmission', 'Kilométrage',
       'Mise en circulation', 'Carrosserie', 'cylindre', 'Énergie']]
y=df['price']

ohe=OneHotEncoder()
X.fillna('', inplace=True)
ohe.fit(X[['Énergie','Transmission', 'Carrosserie',
       'Marque', 'Modèle']])

column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['Énergie','Transmission', 'Carrosserie',
       'Marque', 'Modèle']),
                                    remainder='passthrough')

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=494)

    # Initialize XGBoostRegressor avec les meilleurs paramètres
best_xgb_model1 = XGBRegressor(
    learning_rate=0.1,
    max_depth=3,
    n_estimators=1000
    )
pipe2 = make_pipeline(column_trans, StandardScaler(with_mean=False),best_xgb_model1)

        # Fit the model to the training data
pipe2.fit(X_train, y_train)

    # Make predictions on the test set
y_pred = pipe2.predict(X_test)
# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print("MSE:", mse)
print("R2:", r2)
print("MAE:", mae)

y_test-y_pred

# Enregistrer le modèle avec pickle
with open('modele.pkl', 'wb') as f:
    pickle.dump(pipe2, f)